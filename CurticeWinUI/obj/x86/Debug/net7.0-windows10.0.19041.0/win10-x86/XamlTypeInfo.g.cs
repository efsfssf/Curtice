//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CurticeWinUI
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        private global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace CurticeWinUI.CurticeWinUI_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[97];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "WinUIEx.WindowEx";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[6] = "Double";
            _typeNameTable[7] = "String";
            _typeNameTable[8] = "Microsoft.UI.Windowing.AppWindow";
            _typeNameTable[9] = "WinUIEx.Icon";
            _typeNameTable[10] = "Microsoft.UI.Windowing.AppWindowPresenter";
            _typeNameTable[11] = "Microsoft.UI.Windowing.AppWindowPresenterKind";
            _typeNameTable[12] = "System.Enum";
            _typeNameTable[13] = "System.ValueType";
            _typeNameTable[14] = "WinUIEx.SystemBackdrop";
            _typeNameTable[15] = "Microsoft.UI.Xaml.Media.MicaBackdrop";
            _typeNameTable[16] = "Microsoft.UI.Xaml.Media.SystemBackdrop";
            _typeNameTable[17] = "Microsoft.UI.Composition.SystemBackdrops.MicaKind";
            _typeNameTable[18] = "CurticeWinUI.MainWindow";
            _typeNameTable[19] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[20] = "Microsoft.UI.Xaml.CornerRadius";
            _typeNameTable[21] = "CurticeWinUI.Views.BookmarksPage";
            _typeNameTable[22] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[23] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[24] = "CurticeWinUI.ViewModels.BookmarksViewModel";
            _typeNameTable[25] = "CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient";
            _typeNameTable[26] = "CommunityToolkit.Mvvm.ComponentModel.ObservableObject";
            _typeNameTable[27] = "CurticeWinUI.Views.FriendsPage";
            _typeNameTable[28] = "CurticeWinUI.ViewModels.FriendsViewModel";
            _typeNameTable[29] = "CurticeWinUI.Views.GroupsPage";
            _typeNameTable[30] = "CurticeWinUI.ViewModels.GroupsViewModel";
            _typeNameTable[31] = "Microsoft.UI.Xaml.Controls.PersonPicture";
            _typeNameTable[32] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[33] = "Microsoft.UI.Xaml.Media.ImageSource";
            _typeNameTable[34] = "Int32";
            _typeNameTable[35] = "Windows.ApplicationModel.Contacts.Contact";
            _typeNameTable[36] = "Microsoft.UI.Xaml.Controls.PersonPictureTemplateSettings";
            _typeNameTable[37] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[38] = "Microsoft.UI.Xaml.Controls.InfoBadge";
            _typeNameTable[39] = "Microsoft.UI.Xaml.Controls.IconSource";
            _typeNameTable[40] = "Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings";
            _typeNameTable[41] = "Microsoft.UI.Xaml.Controls.DropDownButton";
            _typeNameTable[42] = "Microsoft.UI.Xaml.Controls.Button";
            _typeNameTable[43] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[44] = "CurticeWinUI.Views.MessagerPage";
            _typeNameTable[45] = "CurticeWinUI.ViewModels.MessagerViewModel";
            _typeNameTable[46] = "CurticeWinUI.Views.MusicPage";
            _typeNameTable[47] = "CurticeWinUI.ViewModels.MusicViewModel";
            _typeNameTable[48] = "CurticeWinUI.Views.NewsfeedPage";
            _typeNameTable[49] = "CurticeWinUI.ViewModels.NewsfeedViewModel";
            _typeNameTable[50] = "CurticeWinUI.Views.NotificationsPage";
            _typeNameTable[51] = "CurticeWinUI.ViewModels.NotificationsViewModel";
            _typeNameTable[52] = "CurticeWinUI.Views.PhotosPage";
            _typeNameTable[53] = "CurticeWinUI.ViewModels.PhotosViewModel";
            _typeNameTable[54] = "CurticeWinUI.Helpers.EnumToBooleanConverter";
            _typeNameTable[55] = "CurticeWinUI.Helpers.PageKeyToResourceStringConverter";
            _typeNameTable[56] = "Microsoft.UI.Xaml.Controls.InfoBar";
            _typeNameTable[57] = "Microsoft.UI.Xaml.Controls.InfoBarSeverity";
            _typeNameTable[58] = "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase";
            _typeNameTable[59] = "System.Windows.Input.ICommand";
            _typeNameTable[60] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[61] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[62] = "Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings";
            _typeNameTable[63] = "CurticeWinUI.Views.SettingsPage";
            _typeNameTable[64] = "CurticeWinUI.ViewModels.SettingsViewModel";
            _typeNameTable[65] = "Microsoft.UI.Xaml.Controls.NavigationView";
            _typeNameTable[66] = "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
            _typeNameTable[67] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[68] = "Microsoft.UI.Xaml.Controls.AutoSuggestBox";
            _typeNameTable[69] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[70] = "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
            _typeNameTable[71] = "Microsoft.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[72] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[73] = "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
            _typeNameTable[74] = "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
            _typeNameTable[75] = "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
            _typeNameTable[76] = "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
            _typeNameTable[77] = "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
            _typeNameTable[78] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[79] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[80] = "Microsoft.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[81] = "Microsoft.UI.Xaml.Controls.NavigationViewItem";
            _typeNameTable[82] = "Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
            _typeNameTable[83] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[84] = "CurticeWinUI.Helpers.NavigationHelper";
            _typeNameTable[85] = "CurticeWinUI.Behaviors.NavigationViewHeaderBehavior";
            _typeNameTable[86] = "Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>";
            _typeNameTable[87] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[88] = "CurticeWinUI.Behaviors.NavigationViewHeaderMode";
            _typeNameTable[89] = "CurticeWinUI.Views.ShellPage";
            _typeNameTable[90] = "CurticeWinUI.ViewModels.ShellViewModel";
            _typeNameTable[91] = "CurticeWinUI.Views.Test1Page";
            _typeNameTable[92] = "CurticeWinUI.ViewModels.Test1ViewModel";
            _typeNameTable[93] = "CurticeWinUI.Views.Test2Page";
            _typeNameTable[94] = "CurticeWinUI.ViewModels.Test2ViewModel";
            _typeNameTable[95] = "CurticeWinUI.Views.VideosPage";
            _typeNameTable[96] = "CurticeWinUI.ViewModels.VideosViewModel";

            _typeTable = new global::System.Type[97];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::WinUIEx.WindowEx);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[6] = typeof(global::System.Double);
            _typeTable[7] = typeof(global::System.String);
            _typeTable[8] = typeof(global::Microsoft.UI.Windowing.AppWindow);
            _typeTable[9] = typeof(global::WinUIEx.Icon);
            _typeTable[10] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenter);
            _typeTable[11] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenterKind);
            _typeTable[12] = typeof(global::System.Enum);
            _typeTable[13] = typeof(global::System.ValueType);
#pragma warning disable 0618  //   Warning on Deprecated usage
            _typeTable[14] = typeof(global::WinUIEx.SystemBackdrop);
#pragma warning restore 0618
            _typeTable[15] = typeof(global::Microsoft.UI.Xaml.Media.MicaBackdrop);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.Media.SystemBackdrop);
            _typeTable[17] = typeof(global::Microsoft.UI.Composition.SystemBackdrops.MicaKind);
            _typeTable[18] = typeof(global::CurticeWinUI.MainWindow);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.CornerRadius);
            _typeTable[21] = typeof(global::CurticeWinUI.Views.BookmarksPage);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[23] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[24] = typeof(global::CurticeWinUI.ViewModels.BookmarksViewModel);
            _typeTable[25] = typeof(global::CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient);
            _typeTable[26] = typeof(global::CommunityToolkit.Mvvm.ComponentModel.ObservableObject);
            _typeTable[27] = typeof(global::CurticeWinUI.Views.FriendsPage);
            _typeTable[28] = typeof(global::CurticeWinUI.ViewModels.FriendsViewModel);
            _typeTable[29] = typeof(global::CurticeWinUI.Views.GroupsPage);
            _typeTable[30] = typeof(global::CurticeWinUI.ViewModels.GroupsViewModel);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.Controls.PersonPicture);
            _typeTable[32] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[33] = typeof(global::Microsoft.UI.Xaml.Media.ImageSource);
            _typeTable[34] = typeof(global::System.Int32);
            _typeTable[35] = typeof(global::Windows.ApplicationModel.Contacts.Contact);
            _typeTable[36] = typeof(global::Microsoft.UI.Xaml.Controls.PersonPictureTemplateSettings);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[38] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBadge);
            _typeTable[39] = typeof(global::Microsoft.UI.Xaml.Controls.IconSource);
            _typeTable[40] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings);
            _typeTable[41] = typeof(global::Microsoft.UI.Xaml.Controls.DropDownButton);
            _typeTable[42] = typeof(global::Microsoft.UI.Xaml.Controls.Button);
            _typeTable[43] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[44] = typeof(global::CurticeWinUI.Views.MessagerPage);
            _typeTable[45] = typeof(global::CurticeWinUI.ViewModels.MessagerViewModel);
            _typeTable[46] = typeof(global::CurticeWinUI.Views.MusicPage);
            _typeTable[47] = typeof(global::CurticeWinUI.ViewModels.MusicViewModel);
            _typeTable[48] = typeof(global::CurticeWinUI.Views.NewsfeedPage);
            _typeTable[49] = typeof(global::CurticeWinUI.ViewModels.NewsfeedViewModel);
            _typeTable[50] = typeof(global::CurticeWinUI.Views.NotificationsPage);
            _typeTable[51] = typeof(global::CurticeWinUI.ViewModels.NotificationsViewModel);
            _typeTable[52] = typeof(global::CurticeWinUI.Views.PhotosPage);
            _typeTable[53] = typeof(global::CurticeWinUI.ViewModels.PhotosViewModel);
            _typeTable[54] = typeof(global::CurticeWinUI.Helpers.EnumToBooleanConverter);
            _typeTable[55] = typeof(global::CurticeWinUI.Helpers.PageKeyToResourceStringConverter);
            _typeTable[56] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBar);
            _typeTable[57] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity);
            _typeTable[58] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase);
            _typeTable[59] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[60] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[61] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[62] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings);
            _typeTable[63] = typeof(global::CurticeWinUI.Views.SettingsPage);
            _typeTable[64] = typeof(global::CurticeWinUI.ViewModels.SettingsViewModel);
            _typeTable[65] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationView);
            _typeTable[66] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible);
            _typeTable[67] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[68] = typeof(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox);
            _typeTable[69] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[70] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode);
            _typeTable[71] = typeof(global::Microsoft.UI.Xaml.Controls.StyleSelector);
            _typeTable[72] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[73] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode);
            _typeTable[74] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode);
            _typeTable[75] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus);
            _typeTable[76] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled);
            _typeTable[77] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings);
            _typeTable[78] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[79] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[80] = typeof(global::Microsoft.UI.Xaml.DependencyObjectCollection);
            _typeTable[81] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItem);
            _typeTable[82] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase);
            _typeTable[83] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[84] = typeof(global::CurticeWinUI.Helpers.NavigationHelper);
            _typeTable[85] = typeof(global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior);
            _typeTable[86] = typeof(global::Microsoft.Xaml.Interactivity.Behavior<global::Microsoft.UI.Xaml.Controls.NavigationView>);
            _typeTable[87] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[88] = typeof(global::CurticeWinUI.Behaviors.NavigationViewHeaderMode);
            _typeTable[89] = typeof(global::CurticeWinUI.Views.ShellPage);
            _typeTable[90] = typeof(global::CurticeWinUI.ViewModels.ShellViewModel);
            _typeTable[91] = typeof(global::CurticeWinUI.Views.Test1Page);
            _typeTable[92] = typeof(global::CurticeWinUI.ViewModels.Test1ViewModel);
            _typeTable[93] = typeof(global::CurticeWinUI.Views.Test2Page);
            _typeTable[94] = typeof(global::CurticeWinUI.ViewModels.Test2ViewModel);
            _typeTable[95] = typeof(global::CurticeWinUI.Views.VideosPage);
            _typeTable[96] = typeof(global::CurticeWinUI.ViewModels.VideosViewModel);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_WindowEx() { return new global::WinUIEx.WindowEx(); }
        private object Activate_15_MicaBackdrop() { return new global::Microsoft.UI.Xaml.Media.MicaBackdrop(); }
        private object Activate_18_MainWindow() { return new global::CurticeWinUI.MainWindow(); }
        private object Activate_21_BookmarksPage() { return new global::CurticeWinUI.Views.BookmarksPage(); }
        private object Activate_24_BookmarksViewModel() { return new global::CurticeWinUI.ViewModels.BookmarksViewModel(); }
        private object Activate_27_FriendsPage() { return new global::CurticeWinUI.Views.FriendsPage(); }
        private object Activate_28_FriendsViewModel() { return new global::CurticeWinUI.ViewModels.FriendsViewModel(); }
        private object Activate_29_GroupsPage() { return new global::CurticeWinUI.Views.GroupsPage(); }
        private object Activate_30_GroupsViewModel() { return new global::CurticeWinUI.ViewModels.GroupsViewModel(); }
        private object Activate_31_PersonPicture() { return new global::Microsoft.UI.Xaml.Controls.PersonPicture(); }
        private object Activate_35_Contact() { return new global::Windows.ApplicationModel.Contacts.Contact(); }
        private object Activate_38_InfoBadge() { return new global::Microsoft.UI.Xaml.Controls.InfoBadge(); }
        private object Activate_40_InfoBadgeTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings(); }
        private object Activate_41_DropDownButton() { return new global::Microsoft.UI.Xaml.Controls.DropDownButton(); }
        private object Activate_44_MessagerPage() { return new global::CurticeWinUI.Views.MessagerPage(); }
        private object Activate_45_MessagerViewModel() { return new global::CurticeWinUI.ViewModels.MessagerViewModel(); }
        private object Activate_46_MusicPage() { return new global::CurticeWinUI.Views.MusicPage(); }
        private object Activate_47_MusicViewModel() { return new global::CurticeWinUI.ViewModels.MusicViewModel(); }
        private object Activate_48_NewsfeedPage() { return new global::CurticeWinUI.Views.NewsfeedPage(); }
        private object Activate_49_NewsfeedViewModel() { return new global::CurticeWinUI.ViewModels.NewsfeedViewModel(); }
        private object Activate_50_NotificationsPage() { return new global::CurticeWinUI.Views.NotificationsPage(); }
        private object Activate_51_NotificationsViewModel() { return new global::CurticeWinUI.ViewModels.NotificationsViewModel(); }
        private object Activate_52_PhotosPage() { return new global::CurticeWinUI.Views.PhotosPage(); }
        private object Activate_53_PhotosViewModel() { return new global::CurticeWinUI.ViewModels.PhotosViewModel(); }
        private object Activate_54_EnumToBooleanConverter() { return new global::CurticeWinUI.Helpers.EnumToBooleanConverter(); }
        private object Activate_55_PageKeyToResourceStringConverter() { return new global::CurticeWinUI.Helpers.PageKeyToResourceStringConverter(); }
        private object Activate_56_InfoBar() { return new global::Microsoft.UI.Xaml.Controls.InfoBar(); }
        private object Activate_62_InfoBarTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings(); }
        private object Activate_63_SettingsPage() { return new global::CurticeWinUI.Views.SettingsPage(); }
        private object Activate_65_NavigationView() { return new global::Microsoft.UI.Xaml.Controls.NavigationView(); }
        private object Activate_77_NavigationViewTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings(); }
        private object Activate_79_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_81_NavigationViewItem() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItem(); }
        private object Activate_84_NavigationHelper() { return new global::CurticeWinUI.Helpers.NavigationHelper(); }
        private object Activate_85_NavigationViewHeaderBehavior() { return new global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior(); }
        private object Activate_91_Test1Page() { return new global::CurticeWinUI.Views.Test1Page(); }
        private object Activate_92_Test1ViewModel() { return new global::CurticeWinUI.ViewModels.Test1ViewModel(); }
        private object Activate_93_Test2Page() { return new global::CurticeWinUI.Views.Test2Page(); }
        private object Activate_94_Test2ViewModel() { return new global::CurticeWinUI.ViewModels.Test2ViewModel(); }
        private object Activate_95_VideosPage() { return new global::CurticeWinUI.Views.VideosPage(); }
        private object Activate_96_VideosViewModel() { return new global::CurticeWinUI.ViewModels.VideosViewModel(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_67_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_79_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Microsoft.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  WinUIEx.WindowEx
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_4_WindowEx;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.AddMemberName("WindowContent");
                userType.AddMemberName("MinWidth");
                userType.AddMemberName("MinHeight");
                userType.AddMemberName("PersistenceId");
                userType.AddMemberName("AppWindow");
                userType.AddMemberName("TaskBarIcon");
                userType.AddMemberName("Title");
                userType.AddMemberName("IsTitleBarVisible");
                userType.AddMemberName("IsMinimizable");
                userType.AddMemberName("IsMaximizable");
                userType.AddMemberName("IsResizable");
                userType.AddMemberName("IsShownInSwitchers");
                userType.AddMemberName("IsAlwaysOnTop");
                userType.AddMemberName("Presenter");
                userType.AddMemberName("PresenterKind");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("MaxWidth");
                userType.AddMemberName("MaxHeight");
                userType.AddMemberName("Backdrop");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Double
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  String
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Microsoft.UI.Windowing.AppWindow
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  WinUIEx.Icon
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CreateFromStringMethod = global::WinUIEx.Icon.FromFile;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  Microsoft.UI.Windowing.AppWindowPresenter
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  Microsoft.UI.Windowing.AppWindowPresenterKind
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Default);
                userType.AddEnumValue("CompactOverlay", global::Microsoft.UI.Windowing.AppWindowPresenterKind.CompactOverlay);
                userType.AddEnumValue("FullScreen", global::Microsoft.UI.Windowing.AppWindowPresenterKind.FullScreen);
                userType.AddEnumValue("Overlapped", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Overlapped);
                xamlType = userType;
                break;

            case 12:   //  System.Enum
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 13:   //  System.ValueType
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 14:   //  WinUIEx.SystemBackdrop
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  Microsoft.UI.Xaml.Media.MicaBackdrop
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Media.SystemBackdrop"));
                userType.Activator = Activate_15_MicaBackdrop;
                userType.AddMemberName("Kind");
                xamlType = userType;
                break;

            case 16:   //  Microsoft.UI.Xaml.Media.SystemBackdrop
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Composition.SystemBackdrops.MicaKind
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Base", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.Base);
                userType.AddEnumValue("BaseAlt", global::Microsoft.UI.Composition.SystemBackdrops.MicaKind.BaseAlt);
                xamlType = userType;
                break;

            case 18:   //  CurticeWinUI.MainWindow
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.Activator = Activate_18_MainWindow;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Left");
                userType.AddMemberName("Top");
                userType.AddMemberName("Right");
                userType.AddMemberName("Bottom");
                xamlType = userType;
                break;

            case 20:   //  Microsoft.UI.Xaml.CornerRadius
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("TopLeft");
                userType.AddMemberName("TopRight");
                userType.AddMemberName("BottomRight");
                userType.AddMemberName("BottomLeft");
                xamlType = userType;
                break;

            case 21:   //  CurticeWinUI.Views.BookmarksPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_BookmarksPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  CurticeWinUI.ViewModels.BookmarksViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableObject"));
                xamlType = userType;
                break;

            case 26:   //  CommunityToolkit.Mvvm.ComponentModel.ObservableObject
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 27:   //  CurticeWinUI.Views.FriendsPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_FriendsPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  CurticeWinUI.ViewModels.FriendsViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  CurticeWinUI.Views.GroupsPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_GroupsPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  CurticeWinUI.ViewModels.GroupsViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Microsoft.UI.Xaml.Controls.PersonPicture
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_31_PersonPicture;
                userType.AddMemberName("ProfilePicture");
                userType.AddMemberName("BadgeGlyph");
                userType.AddMemberName("BadgeImageSource");
                userType.AddMemberName("BadgeNumber");
                userType.AddMemberName("BadgeText");
                userType.AddMemberName("Contact");
                userType.AddMemberName("DisplayName");
                userType.AddMemberName("Initials");
                userType.AddMemberName("IsGroup");
                userType.AddMemberName("PreferSmallImage");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 32:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Microsoft.UI.Xaml.Media.ImageSource
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Int32
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  Windows.ApplicationModel.Contacts.Contact
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Microsoft.UI.Xaml.Controls.PersonPictureTemplateSettings
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Microsoft.UI.Xaml.Controls.InfoBadge
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_38_InfoBadge;
                userType.AddMemberName("Value");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 39:   //  Microsoft.UI.Xaml.Controls.IconSource
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  Microsoft.UI.Xaml.Controls.DropDownButton
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_41_DropDownButton;
                xamlType = userType;
                break;

            case 42:   //  Microsoft.UI.Xaml.Controls.Button
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  CurticeWinUI.Views.MessagerPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_44_MessagerPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  CurticeWinUI.ViewModels.MessagerViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  CurticeWinUI.Views.MusicPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_46_MusicPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  CurticeWinUI.ViewModels.MusicViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  CurticeWinUI.Views.NewsfeedPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_NewsfeedPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  CurticeWinUI.ViewModels.NewsfeedViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  CurticeWinUI.Views.NotificationsPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_50_NotificationsPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 51:   //  CurticeWinUI.ViewModels.NotificationsViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  CurticeWinUI.Views.PhotosPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_52_PhotosPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  CurticeWinUI.ViewModels.PhotosViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  CurticeWinUI.Helpers.EnumToBooleanConverter
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_54_EnumToBooleanConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  CurticeWinUI.Helpers.PageKeyToResourceStringConverter
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_55_PageKeyToResourceStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  Microsoft.UI.Xaml.Controls.InfoBar
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_56_InfoBar;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.InfoBar.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("IsClosable");
                userType.AddMemberName("Severity");
                userType.AddMemberName("ActionButton");
                userType.AddMemberName("CloseButtonCommand");
                userType.AddMemberName("CloseButtonCommandParameter");
                userType.AddMemberName("CloseButtonStyle");
                userType.AddMemberName("ContentTemplate");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IsIconVisible");
                userType.AddMemberName("Message");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Title");
                xamlType = userType;
                break;

            case 57:   //  Microsoft.UI.Xaml.Controls.InfoBarSeverity
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Informational", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Informational);
                userType.AddEnumValue("Success", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Success);
                userType.AddEnumValue("Warning", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Warning);
                userType.AddEnumValue("Error", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Error);
                xamlType = userType;
                break;

            case 58:   //  Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  System.Windows.Input.ICommand
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 60:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 61:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 62:   //  Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 63:   //  CurticeWinUI.Views.SettingsPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_63_SettingsPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 64:   //  CurticeWinUI.ViewModels.SettingsViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Microsoft.UI.Xaml.Controls.NavigationView
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_65_NavigationView;
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("IsBackEnabled");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("IsSettingsVisible");
                userType.AddMemberName("ExpandedModeThresholdWidth");
                userType.AddMemberName("Header");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("AlwaysShowHeader");
                userType.AddMemberName("AutoSuggestBox");
                userType.AddMemberName("CompactModeThresholdWidth");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("ContentOverlay");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("FooterMenuItems");
                userType.AddMemberName("FooterMenuItemsSource");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("IsPaneToggleButtonVisible");
                userType.AddMemberName("IsPaneVisible");
                userType.AddMemberName("IsTitleBarAutoPaddingEnabled");
                userType.AddMemberName("MenuItemContainerStyle");
                userType.AddMemberName("MenuItemContainerStyleSelector");
                userType.AddMemberName("MenuItemTemplate");
                userType.AddMemberName("MenuItemTemplateSelector");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("OpenPaneLength");
                userType.AddMemberName("OverflowLabelMode");
                userType.AddMemberName("PaneCustomContent");
                userType.AddMemberName("PaneDisplayMode");
                userType.AddMemberName("PaneFooter");
                userType.AddMemberName("PaneHeader");
                userType.AddMemberName("PaneTitle");
                userType.AddMemberName("PaneToggleButtonStyle");
                userType.AddMemberName("SelectionFollowsFocus");
                userType.AddMemberName("SettingsItem");
                userType.AddMemberName("ShoulderNavigationEnabled");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 66:   //  Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Collapsed);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Visible);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Auto);
                xamlType = userType;
                break;

            case 67:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_67_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 68:   //  Microsoft.UI.Xaml.Controls.AutoSuggestBox
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 69:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 70:   //  Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Minimal", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Minimal);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Compact);
                userType.AddEnumValue("Expanded", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Expanded);
                xamlType = userType;
                break;

            case 71:   //  Microsoft.UI.Xaml.Controls.StyleSelector
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 72:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 73:   //  Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MoreLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel);
                userType.AddEnumValue("NoLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel);
                xamlType = userType;
                break;

            case 74:   //  Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Auto);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Left);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Top);
                userType.AddEnumValue("LeftCompact", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact);
                userType.AddEnumValue("LeftMinimal", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal);
                xamlType = userType;
                break;

            case 75:   //  Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled);
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled);
                xamlType = userType;
                break;

            case 76:   //  Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("WhenSelectionFollowsFocus", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never);
                xamlType = userType;
                break;

            case 77:   //  Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 78:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 79:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_79_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 80:   //  Microsoft.UI.Xaml.DependencyObjectCollection
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 81:   //  Microsoft.UI.Xaml.Controls.NavigationViewItem
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_81_NavigationViewItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("InfoBadge");
                userType.AddMemberName("IsChildSelected");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("SelectsOnInvoked");
                xamlType = userType;
                break;

            case 82:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 83:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 84:   //  CurticeWinUI.Helpers.NavigationHelper
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_84_NavigationHelper;
                userType.AddMemberName("NavigateTo");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 85:   //  CurticeWinUI.Behaviors.NavigationViewHeaderBehavior
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>"));
                userType.Activator = Activate_85_NavigationViewHeaderBehavior;
                userType.AddMemberName("DefaultHeader");
                userType.AddMemberName("DefaultHeaderTemplate");
                userType.AddMemberName("HeaderMode");
                userType.AddMemberName("HeaderContext");
                userType.AddMemberName("HeaderTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 86:   //  Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 87:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 88:   //  CurticeWinUI.Behaviors.NavigationViewHeaderMode
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Always", global::CurticeWinUI.Behaviors.NavigationViewHeaderMode.Always);
                userType.AddEnumValue("Never", global::CurticeWinUI.Behaviors.NavigationViewHeaderMode.Never);
                userType.AddEnumValue("Minimal", global::CurticeWinUI.Behaviors.NavigationViewHeaderMode.Minimal);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 89:   //  CurticeWinUI.Views.ShellPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 90:   //  CurticeWinUI.ViewModels.ShellViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 91:   //  CurticeWinUI.Views.Test1Page
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_91_Test1Page;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 92:   //  CurticeWinUI.ViewModels.Test1ViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 93:   //  CurticeWinUI.Views.Test2Page
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_93_Test2Page;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 94:   //  CurticeWinUI.ViewModels.Test2ViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 95:   //  CurticeWinUI.Views.VideosPage
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_95_VideosPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 96:   //  CurticeWinUI.ViewModels.VideosViewModel
                userType = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.Mvvm.ComponentModel.ObservableRecipient"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_WindowEx_WindowContent(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowContent;
        }
        private void set_1_WindowEx_WindowContent(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowContent = (global::System.Object)Value;
        }
        private object get_2_WindowEx_MinWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinWidth;
        }
        private void set_2_WindowEx_MinWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinWidth = (global::System.Double)Value;
        }
        private object get_3_WindowEx_MinHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinHeight;
        }
        private void set_3_WindowEx_MinHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinHeight = (global::System.Double)Value;
        }
        private object get_4_WindowEx_PersistenceId(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PersistenceId;
        }
        private void set_4_WindowEx_PersistenceId(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PersistenceId = (global::System.String)Value;
        }
        private object get_5_WindowEx_AppWindow(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.AppWindow;
        }
        private object get_6_WindowEx_TaskBarIcon(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.TaskBarIcon;
        }
        private void set_6_WindowEx_TaskBarIcon(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.TaskBarIcon = (global::WinUIEx.Icon)Value;
        }
        private object get_7_WindowEx_Title(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Title;
        }
        private void set_7_WindowEx_Title(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_8_WindowEx_IsTitleBarVisible(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsTitleBarVisible;
        }
        private void set_8_WindowEx_IsTitleBarVisible(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsTitleBarVisible = (global::System.Boolean)Value;
        }
        private object get_9_WindowEx_IsMinimizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMinimizable;
        }
        private void set_9_WindowEx_IsMinimizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMinimizable = (global::System.Boolean)Value;
        }
        private object get_10_WindowEx_IsMaximizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMaximizable;
        }
        private void set_10_WindowEx_IsMaximizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMaximizable = (global::System.Boolean)Value;
        }
        private object get_11_WindowEx_IsResizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsResizable;
        }
        private void set_11_WindowEx_IsResizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsResizable = (global::System.Boolean)Value;
        }
        private object get_12_WindowEx_IsShownInSwitchers(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsShownInSwitchers;
        }
        private void set_12_WindowEx_IsShownInSwitchers(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsShownInSwitchers = (global::System.Boolean)Value;
        }
        private object get_13_WindowEx_IsAlwaysOnTop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsAlwaysOnTop;
        }
        private void set_13_WindowEx_IsAlwaysOnTop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsAlwaysOnTop = (global::System.Boolean)Value;
        }
        private object get_14_WindowEx_Presenter(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Presenter;
        }
        private object get_15_WindowEx_PresenterKind(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PresenterKind;
        }
        private void set_15_WindowEx_PresenterKind(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PresenterKind = (global::Microsoft.UI.Windowing.AppWindowPresenterKind)Value;
        }
        private object get_16_WindowEx_Width(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Width;
        }
        private void set_16_WindowEx_Width(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_17_WindowEx_Height(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Height;
        }
        private void set_17_WindowEx_Height(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_18_WindowEx_MaxWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxWidth;
        }
        private void set_18_WindowEx_MaxWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_19_WindowEx_MaxHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxHeight;
        }
        private void set_19_WindowEx_MaxHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxHeight = (global::System.Double)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_20_WindowEx_Backdrop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Backdrop;
        }
        private void set_20_WindowEx_Backdrop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Backdrop = (global::WinUIEx.SystemBackdrop)Value;
        }
#pragma warning restore 0618
        private object get_21_MicaBackdrop_Kind(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            return that.Kind;
        }
        private void set_21_MicaBackdrop_Kind(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Media.MicaBackdrop)instance;
            that.Kind = (global::Microsoft.UI.Composition.SystemBackdrops.MicaKind)Value;
        }
        private object get_22_Thickness_Left(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Left;
        }
        private void set_22_Thickness_Left(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Left = (global::System.Double)Value;
        }
        private object get_23_Thickness_Top(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Top;
        }
        private void set_23_Thickness_Top(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Top = (global::System.Double)Value;
        }
        private object get_24_Thickness_Right(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Right;
        }
        private void set_24_Thickness_Right(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Right = (global::System.Double)Value;
        }
        private object get_25_Thickness_Bottom(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Bottom;
        }
        private void set_25_Thickness_Bottom(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Bottom = (global::System.Double)Value;
        }
        private object get_26_CornerRadius_TopLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.TopLeft;
        }
        private void set_26_CornerRadius_TopLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.TopLeft = (global::System.Double)Value;
        }
        private object get_27_CornerRadius_TopRight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.TopRight;
        }
        private void set_27_CornerRadius_TopRight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.TopRight = (global::System.Double)Value;
        }
        private object get_28_CornerRadius_BottomRight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.BottomRight;
        }
        private void set_28_CornerRadius_BottomRight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.BottomRight = (global::System.Double)Value;
        }
        private object get_29_CornerRadius_BottomLeft(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            return that.BottomLeft;
        }
        private void set_29_CornerRadius_BottomLeft(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.CornerRadius)instance;
            that.BottomLeft = (global::System.Double)Value;
        }
        private object get_30_BookmarksPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.BookmarksPage)instance;
            return that.ViewModel;
        }
        private object get_31_FriendsPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.FriendsPage)instance;
            return that.ViewModel;
        }
        private object get_32_GroupsPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.GroupsPage)instance;
            return that.ViewModel;
        }
        private object get_33_PersonPicture_ProfilePicture(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.ProfilePicture;
        }
        private void set_33_PersonPicture_ProfilePicture(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.ProfilePicture = (global::Microsoft.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_34_PersonPicture_BadgeGlyph(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.BadgeGlyph;
        }
        private void set_34_PersonPicture_BadgeGlyph(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.BadgeGlyph = (global::System.String)Value;
        }
        private object get_35_PersonPicture_BadgeImageSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.BadgeImageSource;
        }
        private void set_35_PersonPicture_BadgeImageSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.BadgeImageSource = (global::Microsoft.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_36_PersonPicture_BadgeNumber(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.BadgeNumber;
        }
        private void set_36_PersonPicture_BadgeNumber(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.BadgeNumber = (global::System.Int32)Value;
        }
        private object get_37_PersonPicture_BadgeText(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.BadgeText;
        }
        private void set_37_PersonPicture_BadgeText(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.BadgeText = (global::System.String)Value;
        }
        private object get_38_PersonPicture_Contact(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.Contact;
        }
        private void set_38_PersonPicture_Contact(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.Contact = (global::Windows.ApplicationModel.Contacts.Contact)Value;
        }
        private object get_39_PersonPicture_DisplayName(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.DisplayName;
        }
        private void set_39_PersonPicture_DisplayName(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.DisplayName = (global::System.String)Value;
        }
        private object get_40_PersonPicture_Initials(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.Initials;
        }
        private void set_40_PersonPicture_Initials(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.Initials = (global::System.String)Value;
        }
        private object get_41_PersonPicture_IsGroup(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.IsGroup;
        }
        private void set_41_PersonPicture_IsGroup(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.IsGroup = (global::System.Boolean)Value;
        }
        private object get_42_PersonPicture_PreferSmallImage(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.PreferSmallImage;
        }
        private void set_42_PersonPicture_PreferSmallImage(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            that.PreferSmallImage = (global::System.Boolean)Value;
        }
        private object get_43_PersonPicture_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.PersonPicture)instance;
            return that.TemplateSettings;
        }
        private object get_44_InfoBadge_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.Value;
        }
        private void set_44_InfoBadge_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_45_InfoBadge_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.IconSource;
        }
        private void set_45_InfoBadge_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_46_InfoBadge_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.TemplateSettings;
        }
        private object get_47_MessagerPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.MessagerPage)instance;
            return that.ViewModel;
        }
        private object get_48_MusicPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.MusicPage)instance;
            return that.ViewModel;
        }
        private object get_49_NewsfeedPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.NewsfeedPage)instance;
            return that.ViewModel;
        }
        private object get_50_NotificationsPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.NotificationsPage)instance;
            return that.ViewModel;
        }
        private object get_51_PhotosPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.PhotosPage)instance;
            return that.ViewModel;
        }
        private object get_52_InfoBar_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Content;
        }
        private void set_52_InfoBar_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_53_InfoBar_IsOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsOpen;
        }
        private void set_53_InfoBar_IsOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_54_InfoBar_IsClosable(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsClosable;
        }
        private void set_54_InfoBar_IsClosable(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsClosable = (global::System.Boolean)Value;
        }
        private object get_55_InfoBar_Severity(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Severity;
        }
        private void set_55_InfoBar_Severity(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Severity = (global::Microsoft.UI.Xaml.Controls.InfoBarSeverity)Value;
        }
        private object get_56_InfoBar_ActionButton(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.ActionButton;
        }
        private void set_56_InfoBar_ActionButton(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.ActionButton = (global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase)Value;
        }
        private object get_57_InfoBar_CloseButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonCommand;
        }
        private void set_57_InfoBar_CloseButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_58_InfoBar_CloseButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonCommandParameter;
        }
        private void set_58_InfoBar_CloseButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_59_InfoBar_CloseButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonStyle;
        }
        private void set_59_InfoBar_CloseButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_60_InfoBar_ContentTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.ContentTemplate;
        }
        private void set_60_InfoBar_ContentTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.ContentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_61_InfoBar_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IconSource;
        }
        private void set_61_InfoBar_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_62_InfoBar_IsIconVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsIconVisible;
        }
        private void set_62_InfoBar_IsIconVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsIconVisible = (global::System.Boolean)Value;
        }
        private object get_63_InfoBar_Message(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Message;
        }
        private void set_63_InfoBar_Message(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Message = (global::System.String)Value;
        }
        private object get_64_InfoBar_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.TemplateSettings;
        }
        private object get_65_InfoBar_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Title;
        }
        private void set_65_InfoBar_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_66_SettingsPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.SettingsPage)instance;
            return that.ViewModel;
        }
        private object get_67_NavigationView_IsBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackButtonVisible;
        }
        private void set_67_NavigationView_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackButtonVisible = (global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible)Value;
        }
        private object get_68_NavigationView_IsBackEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackEnabled;
        }
        private void set_68_NavigationView_IsBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackEnabled = (global::System.Boolean)Value;
        }
        private object get_69_NavigationView_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectedItem;
        }
        private void set_69_NavigationView_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_70_NavigationView_IsSettingsVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsSettingsVisible;
        }
        private void set_70_NavigationView_IsSettingsVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsSettingsVisible = (global::System.Boolean)Value;
        }
        private object get_71_NavigationView_ExpandedModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ExpandedModeThresholdWidth;
        }
        private void set_71_NavigationView_ExpandedModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ExpandedModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_72_NavigationView_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.Header;
        }
        private void set_72_NavigationView_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_73_NavigationView_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItems;
        }
        private object get_74_NavigationView_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.HeaderTemplate;
        }
        private void set_74_NavigationView_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_75_NavigationView_AlwaysShowHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AlwaysShowHeader;
        }
        private void set_75_NavigationView_AlwaysShowHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AlwaysShowHeader = (global::System.Boolean)Value;
        }
        private object get_76_NavigationView_AutoSuggestBox(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AutoSuggestBox;
        }
        private void set_76_NavigationView_AutoSuggestBox(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AutoSuggestBox = (global::Microsoft.UI.Xaml.Controls.AutoSuggestBox)Value;
        }
        private object get_77_NavigationView_CompactModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactModeThresholdWidth;
        }
        private void set_77_NavigationView_CompactModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_78_NavigationView_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactPaneLength;
        }
        private void set_78_NavigationView_CompactPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactPaneLength = (global::System.Double)Value;
        }
        private object get_79_NavigationView_ContentOverlay(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ContentOverlay;
        }
        private void set_79_NavigationView_ContentOverlay(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ContentOverlay = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_80_NavigationView_DisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.DisplayMode;
        }
        private object get_81_NavigationView_FooterMenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItems;
        }
        private object get_82_NavigationView_FooterMenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItemsSource;
        }
        private void set_82_NavigationView_FooterMenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.FooterMenuItemsSource = (global::System.Object)Value;
        }
        private object get_83_NavigationView_IsPaneOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneOpen;
        }
        private void set_83_NavigationView_IsPaneOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_84_NavigationView_IsPaneToggleButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneToggleButtonVisible;
        }
        private void set_84_NavigationView_IsPaneToggleButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneToggleButtonVisible = (global::System.Boolean)Value;
        }
        private object get_85_NavigationView_IsPaneVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneVisible;
        }
        private void set_85_NavigationView_IsPaneVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneVisible = (global::System.Boolean)Value;
        }
        private object get_86_NavigationView_IsTitleBarAutoPaddingEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsTitleBarAutoPaddingEnabled;
        }
        private void set_86_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsTitleBarAutoPaddingEnabled = (global::System.Boolean)Value;
        }
        private object get_87_NavigationView_MenuItemContainerStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyle;
        }
        private void set_87_NavigationView_MenuItemContainerStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_88_NavigationView_MenuItemContainerStyleSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyleSelector;
        }
        private void set_88_NavigationView_MenuItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_89_NavigationView_MenuItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplate;
        }
        private void set_89_NavigationView_MenuItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_90_NavigationView_MenuItemTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplateSelector;
        }
        private void set_90_NavigationView_MenuItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_91_NavigationView_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemsSource;
        }
        private void set_91_NavigationView_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_92_NavigationView_OpenPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OpenPaneLength;
        }
        private void set_92_NavigationView_OpenPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OpenPaneLength = (global::System.Double)Value;
        }
        private object get_93_NavigationView_OverflowLabelMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OverflowLabelMode;
        }
        private void set_93_NavigationView_OverflowLabelMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OverflowLabelMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode)Value;
        }
        private object get_94_NavigationView_PaneCustomContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneCustomContent;
        }
        private void set_94_NavigationView_PaneCustomContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneCustomContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_95_NavigationView_PaneDisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneDisplayMode;
        }
        private void set_95_NavigationView_PaneDisplayMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneDisplayMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode)Value;
        }
        private object get_96_NavigationView_PaneFooter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneFooter;
        }
        private void set_96_NavigationView_PaneFooter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_97_NavigationView_PaneHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneHeader;
        }
        private void set_97_NavigationView_PaneHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_98_NavigationView_PaneTitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneTitle;
        }
        private void set_98_NavigationView_PaneTitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneTitle = (global::System.String)Value;
        }
        private object get_99_NavigationView_PaneToggleButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneToggleButtonStyle;
        }
        private void set_99_NavigationView_PaneToggleButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneToggleButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_100_NavigationView_SelectionFollowsFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectionFollowsFocus;
        }
        private void set_100_NavigationView_SelectionFollowsFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectionFollowsFocus = (global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus)Value;
        }
        private object get_101_NavigationView_SettingsItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SettingsItem;
        }
        private object get_102_NavigationView_ShoulderNavigationEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ShoulderNavigationEnabled;
        }
        private void set_102_NavigationView_ShoulderNavigationEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ShoulderNavigationEnabled = (global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled)Value;
        }
        private object get_103_NavigationView_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.TemplateSettings;
        }
        private object get_104_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_104_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_105_NavigationViewItem_Icon(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.Icon;
        }
        private void set_105_NavigationViewItem_Icon(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_106_NavigationViewItem_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.CompactPaneLength;
        }
        private object get_107_NavigationViewItem_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_107_NavigationViewItem_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_108_NavigationViewItem_InfoBadge(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.InfoBadge;
        }
        private void set_108_NavigationViewItem_InfoBadge(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.InfoBadge = (global::Microsoft.UI.Xaml.Controls.InfoBadge)Value;
        }
        private object get_109_NavigationViewItem_IsChildSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsChildSelected;
        }
        private void set_109_NavigationViewItem_IsChildSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsChildSelected = (global::System.Boolean)Value;
        }
        private object get_110_NavigationViewItem_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsExpanded;
        }
        private void set_110_NavigationViewItem_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_111_NavigationViewItem_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItems;
        }
        private object get_112_NavigationViewItem_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItemsSource;
        }
        private void set_112_NavigationViewItem_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_113_NavigationViewItem_SelectsOnInvoked(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.SelectsOnInvoked;
        }
        private void set_113_NavigationViewItem_SelectsOnInvoked(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.SelectsOnInvoked = (global::System.Boolean)Value;
        }
        private object get_114_NavigationViewItemBase_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            return that.IsSelected;
        }
        private void set_114_NavigationViewItemBase_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_115_NavigationHelper_NavigateTo(object instance)
        {
            return global::CurticeWinUI.Helpers.NavigationHelper.GetNavigateTo((global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance);
        }
        private void set_115_NavigationHelper_NavigateTo(object instance, object Value)
        {
            global::CurticeWinUI.Helpers.NavigationHelper.SetNavigateTo((global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance, (global::System.String)Value);
        }
        private object get_116_NavigationViewHeaderBehavior_DefaultHeader(object instance)
        {
            var that = (global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior)instance;
            return that.DefaultHeader;
        }
        private void set_116_NavigationViewHeaderBehavior_DefaultHeader(object instance, object Value)
        {
            var that = (global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior)instance;
            that.DefaultHeader = (global::System.Object)Value;
        }
        private object get_117_NavigationViewHeaderBehavior_DefaultHeaderTemplate(object instance)
        {
            var that = (global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior)instance;
            return that.DefaultHeaderTemplate;
        }
        private void set_117_NavigationViewHeaderBehavior_DefaultHeaderTemplate(object instance, object Value)
        {
            var that = (global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior)instance;
            that.DefaultHeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_118_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior<global::Microsoft.UI.Xaml.Controls.NavigationView>)instance;
            return that.AssociatedObject;
        }
        private object get_119_NavigationViewHeaderBehavior_HeaderMode(object instance)
        {
            return global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.GetHeaderMode((global::Microsoft.UI.Xaml.Controls.Page)instance);
        }
        private void set_119_NavigationViewHeaderBehavior_HeaderMode(object instance, object Value)
        {
            global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.SetHeaderMode((global::Microsoft.UI.Xaml.Controls.Page)instance, (global::CurticeWinUI.Behaviors.NavigationViewHeaderMode)Value);
        }
        private object get_120_NavigationViewHeaderBehavior_HeaderContext(object instance)
        {
            return global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.GetHeaderContext((global::Microsoft.UI.Xaml.Controls.Page)instance);
        }
        private void set_120_NavigationViewHeaderBehavior_HeaderContext(object instance, object Value)
        {
            global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.SetHeaderContext((global::Microsoft.UI.Xaml.Controls.Page)instance, (global::System.Object)Value);
        }
        private object get_121_NavigationViewHeaderBehavior_HeaderTemplate(object instance)
        {
            return global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.GetHeaderTemplate((global::Microsoft.UI.Xaml.Controls.Page)instance);
        }
        private void set_121_NavigationViewHeaderBehavior_HeaderTemplate(object instance, object Value)
        {
            global::CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.SetHeaderTemplate((global::Microsoft.UI.Xaml.Controls.Page)instance, (global::Microsoft.UI.Xaml.DataTemplate)Value);
        }
        private object get_122_ShellPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.ShellPage)instance;
            return that.ViewModel;
        }
        private object get_123_Test1Page_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.Test1Page)instance;
            return that.ViewModel;
        }
        private object get_124_Test2Page_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.Test2Page)instance;
            return that.ViewModel;
        }
        private object get_125_VideosPage_ViewModel(object instance)
        {
            var that = (global::CurticeWinUI.Views.VideosPage)instance;
            return that.ViewModel;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember xamlMember = null;
            global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "WinUIEx.WindowEx.WindowContent":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "WindowContent", "Object");
                xamlMember.Getter = get_1_WindowEx_WindowContent;
                xamlMember.Setter = set_1_WindowEx_WindowContent;
                break;
            case "WinUIEx.WindowEx.MinWidth":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MinWidth", "Double");
                xamlMember.Getter = get_2_WindowEx_MinWidth;
                xamlMember.Setter = set_2_WindowEx_MinWidth;
                break;
            case "WinUIEx.WindowEx.MinHeight":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MinHeight", "Double");
                xamlMember.Getter = get_3_WindowEx_MinHeight;
                xamlMember.Setter = set_3_WindowEx_MinHeight;
                break;
            case "WinUIEx.WindowEx.PersistenceId":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PersistenceId", "String");
                xamlMember.Getter = get_4_WindowEx_PersistenceId;
                xamlMember.Setter = set_4_WindowEx_PersistenceId;
                break;
            case "WinUIEx.WindowEx.AppWindow":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "AppWindow", "Microsoft.UI.Windowing.AppWindow");
                xamlMember.Getter = get_5_WindowEx_AppWindow;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.TaskBarIcon":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "TaskBarIcon", "WinUIEx.Icon");
                xamlMember.Getter = get_6_WindowEx_TaskBarIcon;
                xamlMember.Setter = set_6_WindowEx_TaskBarIcon;
                break;
            case "WinUIEx.WindowEx.Title":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_7_WindowEx_Title;
                xamlMember.Setter = set_7_WindowEx_Title;
                break;
            case "WinUIEx.WindowEx.IsTitleBarVisible":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsTitleBarVisible", "Boolean");
                xamlMember.Getter = get_8_WindowEx_IsTitleBarVisible;
                xamlMember.Setter = set_8_WindowEx_IsTitleBarVisible;
                break;
            case "WinUIEx.WindowEx.IsMinimizable":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsMinimizable", "Boolean");
                xamlMember.Getter = get_9_WindowEx_IsMinimizable;
                xamlMember.Setter = set_9_WindowEx_IsMinimizable;
                break;
            case "WinUIEx.WindowEx.IsMaximizable":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsMaximizable", "Boolean");
                xamlMember.Getter = get_10_WindowEx_IsMaximizable;
                xamlMember.Setter = set_10_WindowEx_IsMaximizable;
                break;
            case "WinUIEx.WindowEx.IsResizable":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsResizable", "Boolean");
                xamlMember.Getter = get_11_WindowEx_IsResizable;
                xamlMember.Setter = set_11_WindowEx_IsResizable;
                break;
            case "WinUIEx.WindowEx.IsShownInSwitchers":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsShownInSwitchers", "Boolean");
                xamlMember.Getter = get_12_WindowEx_IsShownInSwitchers;
                xamlMember.Setter = set_12_WindowEx_IsShownInSwitchers;
                break;
            case "WinUIEx.WindowEx.IsAlwaysOnTop":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsAlwaysOnTop", "Boolean");
                xamlMember.Getter = get_13_WindowEx_IsAlwaysOnTop;
                xamlMember.Setter = set_13_WindowEx_IsAlwaysOnTop;
                break;
            case "WinUIEx.WindowEx.Presenter":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Presenter", "Microsoft.UI.Windowing.AppWindowPresenter");
                xamlMember.Getter = get_14_WindowEx_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.PresenterKind":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PresenterKind", "Microsoft.UI.Windowing.AppWindowPresenterKind");
                xamlMember.Getter = get_15_WindowEx_PresenterKind;
                xamlMember.Setter = set_15_WindowEx_PresenterKind;
                break;
            case "WinUIEx.WindowEx.Width":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_16_WindowEx_Width;
                xamlMember.Setter = set_16_WindowEx_Width;
                break;
            case "WinUIEx.WindowEx.Height":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_17_WindowEx_Height;
                xamlMember.Setter = set_17_WindowEx_Height;
                break;
            case "WinUIEx.WindowEx.MaxWidth":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.Getter = get_18_WindowEx_MaxWidth;
                xamlMember.Setter = set_18_WindowEx_MaxWidth;
                break;
            case "WinUIEx.WindowEx.MaxHeight":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MaxHeight", "Double");
                xamlMember.Getter = get_19_WindowEx_MaxHeight;
                xamlMember.Setter = set_19_WindowEx_MaxHeight;
                break;
            case "WinUIEx.WindowEx.Backdrop":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Backdrop", "WinUIEx.SystemBackdrop");
                xamlMember.Getter = get_20_WindowEx_Backdrop;
                xamlMember.Setter = set_20_WindowEx_Backdrop;
                break;
            case "Microsoft.UI.Xaml.Media.MicaBackdrop.Kind":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Media.MicaBackdrop");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Kind", "Microsoft.UI.Composition.SystemBackdrops.MicaKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_MicaBackdrop_Kind;
                xamlMember.Setter = set_21_MicaBackdrop_Kind;
                break;
            case "Microsoft.UI.Xaml.Thickness.Left":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Left", "Double");
                xamlMember.Getter = get_22_Thickness_Left;
                xamlMember.Setter = set_22_Thickness_Left;
                break;
            case "Microsoft.UI.Xaml.Thickness.Top":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Top", "Double");
                xamlMember.Getter = get_23_Thickness_Top;
                xamlMember.Setter = set_23_Thickness_Top;
                break;
            case "Microsoft.UI.Xaml.Thickness.Right":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Right", "Double");
                xamlMember.Getter = get_24_Thickness_Right;
                xamlMember.Setter = set_24_Thickness_Right;
                break;
            case "Microsoft.UI.Xaml.Thickness.Bottom":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Bottom", "Double");
                xamlMember.Getter = get_25_Thickness_Bottom;
                xamlMember.Setter = set_25_Thickness_Bottom;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.TopLeft":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "TopLeft", "Double");
                xamlMember.Getter = get_26_CornerRadius_TopLeft;
                xamlMember.Setter = set_26_CornerRadius_TopLeft;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.TopRight":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "TopRight", "Double");
                xamlMember.Getter = get_27_CornerRadius_TopRight;
                xamlMember.Setter = set_27_CornerRadius_TopRight;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.BottomRight":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "BottomRight", "Double");
                xamlMember.Getter = get_28_CornerRadius_BottomRight;
                xamlMember.Setter = set_28_CornerRadius_BottomRight;
                break;
            case "Microsoft.UI.Xaml.CornerRadius.BottomLeft":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.CornerRadius");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "BottomLeft", "Double");
                xamlMember.Getter = get_29_CornerRadius_BottomLeft;
                xamlMember.Setter = set_29_CornerRadius_BottomLeft;
                break;
            case "CurticeWinUI.Views.BookmarksPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.BookmarksPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.BookmarksViewModel");
                xamlMember.Getter = get_30_BookmarksPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.FriendsPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.FriendsPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.FriendsViewModel");
                xamlMember.Getter = get_31_FriendsPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.GroupsPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.GroupsPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.GroupsViewModel");
                xamlMember.Getter = get_32_GroupsPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.ProfilePicture":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ProfilePicture", "Microsoft.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_PersonPicture_ProfilePicture;
                xamlMember.Setter = set_33_PersonPicture_ProfilePicture;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.BadgeGlyph":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "BadgeGlyph", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_PersonPicture_BadgeGlyph;
                xamlMember.Setter = set_34_PersonPicture_BadgeGlyph;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.BadgeImageSource":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "BadgeImageSource", "Microsoft.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_PersonPicture_BadgeImageSource;
                xamlMember.Setter = set_35_PersonPicture_BadgeImageSource;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.BadgeNumber":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "BadgeNumber", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_PersonPicture_BadgeNumber;
                xamlMember.Setter = set_36_PersonPicture_BadgeNumber;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.BadgeText":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "BadgeText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_PersonPicture_BadgeText;
                xamlMember.Setter = set_37_PersonPicture_BadgeText;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.Contact":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Contact", "Windows.ApplicationModel.Contacts.Contact");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_PersonPicture_Contact;
                xamlMember.Setter = set_38_PersonPicture_Contact;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.DisplayName":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "DisplayName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_PersonPicture_DisplayName;
                xamlMember.Setter = set_39_PersonPicture_DisplayName;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.Initials":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Initials", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_PersonPicture_Initials;
                xamlMember.Setter = set_40_PersonPicture_Initials;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.IsGroup":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsGroup", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_PersonPicture_IsGroup;
                xamlMember.Setter = set_41_PersonPicture_IsGroup;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.PreferSmallImage":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PreferSmallImage", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_PersonPicture_PreferSmallImage;
                xamlMember.Setter = set_42_PersonPicture_PreferSmallImage;
                break;
            case "Microsoft.UI.Xaml.Controls.PersonPicture.TemplateSettings":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.PersonPicture");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.PersonPictureTemplateSettings");
                xamlMember.Getter = get_43_PersonPicture_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.Value":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_InfoBadge_Value;
                xamlMember.Setter = set_44_InfoBadge_Value;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.IconSource":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_InfoBadge_IconSource;
                xamlMember.Setter = set_45_InfoBadge_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.TemplateSettings":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_InfoBadge_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.MessagerPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.MessagerPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.MessagerViewModel");
                xamlMember.Getter = get_47_MessagerPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.MusicPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.MusicPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.MusicViewModel");
                xamlMember.Getter = get_48_MusicPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.NewsfeedPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.NewsfeedPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.NewsfeedViewModel");
                xamlMember.Getter = get_49_NewsfeedPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.NotificationsPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.NotificationsPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.NotificationsViewModel");
                xamlMember.Getter = get_50_NotificationsPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.PhotosPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.PhotosPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.PhotosViewModel");
                xamlMember.Getter = get_51_PhotosPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Content":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_InfoBar_Content;
                xamlMember.Setter = set_52_InfoBar_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsOpen":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_InfoBar_IsOpen;
                xamlMember.Setter = set_53_InfoBar_IsOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsClosable":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsClosable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_InfoBar_IsClosable;
                xamlMember.Setter = set_54_InfoBar_IsClosable;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Severity":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Severity", "Microsoft.UI.Xaml.Controls.InfoBarSeverity");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_InfoBar_Severity;
                xamlMember.Setter = set_55_InfoBar_Severity;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.ActionButton":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ActionButton", "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_InfoBar_ActionButton;
                xamlMember.Setter = set_56_InfoBar_ActionButton;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommand":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "CloseButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_InfoBar_CloseButtonCommand;
                xamlMember.Setter = set_57_InfoBar_CloseButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommandParameter":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "CloseButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_InfoBar_CloseButtonCommandParameter;
                xamlMember.Setter = set_58_InfoBar_CloseButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonStyle":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "CloseButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_InfoBar_CloseButtonStyle;
                xamlMember.Setter = set_59_InfoBar_CloseButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.ContentTemplate":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ContentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_InfoBar_ContentTemplate;
                xamlMember.Setter = set_60_InfoBar_ContentTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IconSource":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_InfoBar_IconSource;
                xamlMember.Setter = set_61_InfoBar_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsIconVisible":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsIconVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_InfoBar_IsIconVisible;
                xamlMember.Setter = set_62_InfoBar_IsIconVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Message":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Message", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_InfoBar_Message;
                xamlMember.Setter = set_63_InfoBar_Message;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.TemplateSettings":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_InfoBar_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Title":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_InfoBar_Title;
                xamlMember.Setter = set_65_InfoBar_Title;
                break;
            case "CurticeWinUI.Views.SettingsPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.SettingsPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.SettingsViewModel");
                xamlMember.Getter = get_66_SettingsPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_NavigationView_IsBackButtonVisible;
                xamlMember.Setter = set_67_NavigationView_IsBackButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_NavigationView_IsBackEnabled;
                xamlMember.Setter = set_68_NavigationView_IsBackEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_NavigationView_SelectedItem;
                xamlMember.Setter = set_69_NavigationView_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsSettingsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_NavigationView_IsSettingsVisible;
                xamlMember.Setter = set_70_NavigationView_IsSettingsVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ExpandedModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_NavigationView_ExpandedModeThresholdWidth;
                xamlMember.Setter = set_71_NavigationView_ExpandedModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.Header":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_NavigationView_Header;
                xamlMember.Setter = set_72_NavigationView_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItems":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_NavigationView_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_NavigationView_HeaderTemplate;
                xamlMember.Setter = set_74_NavigationView_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "AlwaysShowHeader", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_NavigationView_AlwaysShowHeader;
                xamlMember.Setter = set_75_NavigationView_AlwaysShowHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "AutoSuggestBox", "Microsoft.UI.Xaml.Controls.AutoSuggestBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_NavigationView_AutoSuggestBox;
                xamlMember.Setter = set_76_NavigationView_AutoSuggestBox;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "CompactModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_NavigationView_CompactModeThresholdWidth;
                xamlMember.Setter = set_77_NavigationView_CompactModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_NavigationView_CompactPaneLength;
                xamlMember.Setter = set_78_NavigationView_CompactPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ContentOverlay", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_NavigationView_ContentOverlay;
                xamlMember.Setter = set_79_NavigationView_ContentOverlay;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "DisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_NavigationView_DisplayMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "FooterMenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_NavigationView_FooterMenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "FooterMenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_NavigationView_FooterMenuItemsSource;
                xamlMember.Setter = set_82_NavigationView_FooterMenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_NavigationView_IsPaneOpen;
                xamlMember.Setter = set_83_NavigationView_IsPaneOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsPaneToggleButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_NavigationView_IsPaneToggleButtonVisible;
                xamlMember.Setter = set_84_NavigationView_IsPaneToggleButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsPaneVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_NavigationView_IsPaneVisible;
                xamlMember.Setter = set_85_NavigationView_IsPaneVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsTitleBarAutoPaddingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_NavigationView_IsTitleBarAutoPaddingEnabled;
                xamlMember.Setter = set_86_NavigationView_IsTitleBarAutoPaddingEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_NavigationView_MenuItemContainerStyle;
                xamlMember.Setter = set_87_NavigationView_MenuItemContainerStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_NavigationView_MenuItemContainerStyleSelector;
                xamlMember.Setter = set_88_NavigationView_MenuItemContainerStyleSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MenuItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_NavigationView_MenuItemTemplate;
                xamlMember.Setter = set_89_NavigationView_MenuItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MenuItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_NavigationView_MenuItemTemplateSelector;
                xamlMember.Setter = set_90_NavigationView_MenuItemTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_NavigationView_MenuItemsSource;
                xamlMember.Setter = set_91_NavigationView_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "OpenPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_NavigationView_OpenPaneLength;
                xamlMember.Setter = set_92_NavigationView_OpenPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "OverflowLabelMode", "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_NavigationView_OverflowLabelMode;
                xamlMember.Setter = set_93_NavigationView_OverflowLabelMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PaneCustomContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_NavigationView_PaneCustomContent;
                xamlMember.Setter = set_94_NavigationView_PaneCustomContent;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PaneDisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_NavigationView_PaneDisplayMode;
                xamlMember.Setter = set_95_NavigationView_PaneDisplayMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PaneFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_NavigationView_PaneFooter;
                xamlMember.Setter = set_96_NavigationView_PaneFooter;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PaneHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_NavigationView_PaneHeader;
                xamlMember.Setter = set_97_NavigationView_PaneHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PaneTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_NavigationView_PaneTitle;
                xamlMember.Setter = set_98_NavigationView_PaneTitle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "PaneToggleButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_NavigationView_PaneToggleButtonStyle;
                xamlMember.Setter = set_99_NavigationView_PaneToggleButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "SelectionFollowsFocus", "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_NavigationView_SelectionFollowsFocus;
                xamlMember.Setter = set_100_NavigationView_SelectionFollowsFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "SettingsItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_NavigationView_SettingsItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ShoulderNavigationEnabled", "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_NavigationView_ShoulderNavigationEnabled;
                xamlMember.Setter = set_102_NavigationView_ShoulderNavigationEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_NavigationView_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_104_Interaction_Behaviors;
                xamlMember.Setter = set_104_Interaction_Behaviors;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.Icon":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_NavigationViewItem_Icon;
                xamlMember.Setter = set_105_NavigationViewItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.CompactPaneLength":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_NavigationViewItem_CompactPaneLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.HasUnrealizedChildren":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_NavigationViewItem_HasUnrealizedChildren;
                xamlMember.Setter = set_107_NavigationViewItem_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.InfoBadge":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "InfoBadge", "Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_NavigationViewItem_InfoBadge;
                xamlMember.Setter = set_108_NavigationViewItem_InfoBadge;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsChildSelected":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsChildSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_NavigationViewItem_IsChildSelected;
                xamlMember.Setter = set_109_NavigationViewItem_IsChildSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsExpanded":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_NavigationViewItem_IsExpanded;
                xamlMember.Setter = set_110_NavigationViewItem_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItems":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_NavigationViewItem_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItemsSource":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_NavigationViewItem_MenuItemsSource;
                xamlMember.Setter = set_112_NavigationViewItem_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.SelectsOnInvoked":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "SelectsOnInvoked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_NavigationViewItem_SelectsOnInvoked;
                xamlMember.Setter = set_113_NavigationViewItem_SelectsOnInvoked;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_NavigationViewItemBase_IsSelected;
                xamlMember.Setter = set_114_NavigationViewItemBase_IsSelected;
                break;
            case "CurticeWinUI.Helpers.NavigationHelper.NavigateTo":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Helpers.NavigationHelper");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "NavigateTo", "String");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_115_NavigationHelper_NavigateTo;
                xamlMember.Setter = set_115_NavigationHelper_NavigateTo;
                break;
            case "CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.DefaultHeader":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "DefaultHeader", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_NavigationViewHeaderBehavior_DefaultHeader;
                xamlMember.Setter = set_116_NavigationViewHeaderBehavior_DefaultHeader;
                break;
            case "CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.DefaultHeaderTemplate":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "DefaultHeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_117_NavigationViewHeaderBehavior_DefaultHeaderTemplate;
                xamlMember.Setter = set_117_NavigationViewHeaderBehavior_DefaultHeaderTemplate;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>.AssociatedObject":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior`1<Microsoft.UI.Xaml.Controls.NavigationView>");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember.Getter = get_118_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.HeaderMode":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "HeaderMode", "CurticeWinUI.Behaviors.NavigationViewHeaderMode");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.Controls.Page");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_119_NavigationViewHeaderBehavior_HeaderMode;
                xamlMember.Setter = set_119_NavigationViewHeaderBehavior_HeaderMode;
                break;
            case "CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.HeaderContext":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "HeaderContext", "Object");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.Controls.Page");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_120_NavigationViewHeaderBehavior_HeaderContext;
                xamlMember.Setter = set_120_NavigationViewHeaderBehavior_HeaderContext;
                break;
            case "CurticeWinUI.Behaviors.NavigationViewHeaderBehavior.HeaderTemplate":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Behaviors.NavigationViewHeaderBehavior");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.Controls.Page");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_121_NavigationViewHeaderBehavior_HeaderTemplate;
                xamlMember.Setter = set_121_NavigationViewHeaderBehavior_HeaderTemplate;
                break;
            case "CurticeWinUI.Views.ShellPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.ShellPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.ShellViewModel");
                xamlMember.Getter = get_122_ShellPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.Test1Page.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.Test1Page");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.Test1ViewModel");
                xamlMember.Getter = get_123_Test1Page_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.Test2Page.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.Test2Page");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.Test2ViewModel");
                xamlMember.Getter = get_124_Test2Page_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "CurticeWinUI.Views.VideosPage.ViewModel":
                userType = (global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CurticeWinUI.Views.VideosPage");
                xamlMember = new global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlMember(this, "ViewModel", "CurticeWinUI.ViewModels.VideosViewModel");
                xamlMember.Getter = get_125_VideosPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::CurticeWinUI.CurticeWinUI_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

